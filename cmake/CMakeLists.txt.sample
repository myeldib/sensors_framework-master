CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
#------------------------------------------------------------------------
# project name
#------------------------------------------------------------------------
PROJECT(project_name)

#------------------------------------------------------------------------
# build defenitions (on top for fast access)
#------------------------------------------------------------------------
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)


#------------------------------------------------------------------------
# library dependencies
#------------------------------------------------------------------------
## cmake module path (make sure to pull the cmake subrepository)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)


## OpenCV
#SET(OpenCV_ROOT_DIR /usr/local) #path to your opencv installation (only if compiled manually)
#FIND_PACKAGE( OpenCV REQUIRED )


## Boost (please purge unneeded components)
#FIND_PACKAGE( Boost REQUIRED COMPONENTS date_time
#                                        filesystem
#                                        system
#                                        graph
#                                        math_c99
#                                        math_tr1
#                                        program_options
#                                        serialization
#                                        regex
#                                        thread
#                                        wave)


## OpenMP
#FIND_PACKAGE(OpenMP REQUIRED)
#ADD_DEFINITIONS(${OpenMP_CXX_FLAGS})
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")


## PCL
#FIND_PACKAGE(PCL 1.5 REQUIRED COMPONENTS common
#                                         kdtree
#                                         octree
#                                         search
#                                         sample_consensus
#                                         filters
#                                         io
#                                         features
#                                         keypoints
#                                         geometry
#                                         segmentation
#                                         visualization
#                                         tracking
#                                         surface
#                                         registration
#                                         apps)
#ADD_DEFINITIONS(${PCL_DEFINITIONS})


## Qt
#SET(QT_USE_OPENGL TRUE)
#SET(QT_WRAP_CPP TRUE)
#FIND_PACKAGE(Qt4 REQUIRED COMPONENTS QtGui
#                                     Qt3Support
#                                     QtSvg
#                                     QtScript
#                                     QtTest
#                                     QtUiTools
#                                     QtHelp
#                                     QtWebKit
#                                     QtXmlPatterns
#                                     phonon
#                                     QtNetwork
#                                     QtMultimedia
#                                     QtNsPlugin
#                                     QtOpenGL
#                                     QtSql
#                                     QtXml
#                                     QtDesigner
#                                     QtDBus
#                                     QtScriptTools
#                                     QtDeclarative)
#ADD_DEFINITIONS(${QT_DEFINITIONS})
#INCLUDE( ${QT_USE_FILE} )
# when using Qt, you remember to moc the headers later on
#QT4_WRAP_CPP(MOCFILES ${MOCHEADERS})


## TBB
#FIND_PACKAGE(TBB)


## Prosilica libs
#FIND_PACKAGE(GigEAvt)


## OpenGL
#FIND_PACKAGE(OpenGL REQUIRED)


## GStreamer
#FIND_PACKAGE(GStreamer REQUIRED)
#ADD_DEFINITIONS(${GSTREAMER_DEFINITIONS})


## GStreamermm
#FIND_PACKAGE(GStreamermm REQUIRED)
#ADD_DEFINITIONS(${GSTREAMERMM_DEFINITIONS})


## FFMPEG
#FIND_PACKAGE(FFMPEG REQUIRED)


## XTest (included in X11)
#FIND_PACKAGE(X11 REQUIRED)


#------------------------------------------------------------------------
# include & link directories
#------------------------------------------------------------------------

## from library dependencies
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS}
                    ${Boost_INCLUDE_DIRS})
		    ${PCL_INCLUDE_DIRS}
                    ${GIGEAVT_INCLUDE_DIRS}
                    ${OPENGL_INCLUDE_DIRS}
                    ${GSTREAMER_INCLUDE_DIR}
		    ${GSTREAMERMM_INCLUDE_DIR}
                    ${FFMPEG_INCLUDE_DIR}
                    ${X11_XTest_INCLUDE_PATH}
)

LINK_DIRECTORIES( ${OpenCV_LIB_DIR}
                  ${Boost_LIBRARY_DIRS}
		  ${PCL_LIBRARY_DIRS}
                  ${GIGEAVT_LIBRARY_DIRS}
                  ${OPENGL_LIBRARY_DIRS}
                  ${FFMPEG_LIBRARY_DIR}
)


## from this project
INCLUDE_DIRECTORIES(
    "${PROJECT_SOURCE_DIR}/include"   # public header go here
    "${PROJECT_SOURCE_DIR}/src"       # private headers go here
)



#------------------------------------------------------------------------
# build
#------------------------------------------------------------------------
SET(HEADERS include/publicheader.h)

SET(SOURCES src/main.cpp
            src/privateclass.h
            src/privateclass.cpp
)


ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCES} ${HEADERS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OpenCV_LIBS}
                                      ${Boost_LIBRARIES}
				      ${PCL_LIBRARIES}
                   		      ${GIGEAVT_LIBRARIES}
				      ${OPENGL_LIBRARIES}
                                      ${GSTREAMER_LIBRARIES}
                                      ${GSTREAMERMM_LIBRARIES}
                                      ${FFMPEG_LIBRARIES}
                                      ${X11_XTest_LIB}
)


