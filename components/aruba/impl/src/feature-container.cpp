#include<feature-container.h>
/*
 * feature-reader.cpp
 *
 *  Created on: 2018-04-15
 *      Author: Mohamed Eldib
 * This class contains features from the following files generated by hist_cluster class
 * 1- activity_per_window (generated by hist_cluster class)
 * 2- sequence_patterns (generated by hist_cluster class)
 * 3- discovered_patterns (generated by hist_cluster class)
 * 4- sensor_durations (generated by time-window-approach class)
 */
/**
 * @brief FeatureContainer::FeatureContainer
 */
FeatureContainer::FeatureContainer()
{

}

/**
 * @brief FeatureContainer::~FeatureContainer
 */
FeatureContainer::~FeatureContainer()
{

}

/**
 * @brief FeatureContainer::setActivityLabel
 * @param activit_labels
 */
void FeatureContainer::setActivityLabel(vector<string> activity_labels)
{
  this->activity_labels = activity_labels;
}
/**
 * @brief FeatureContainer::setSequencePatterns
 * @param sequence_patterns
 */
void FeatureContainer::setSequencePatterns(vector<int> sequence_patterns)
{
  this->sequence_patterns = sequence_patterns;
}

/**
 * @brief FeatureContainer::setDiscoveredPatterns
 * @param discovered_patterns
 */
void FeatureContainer::setDiscoveredPatterns(vector<int> discovered_patterns)
{
  this->discovered_patterns = discovered_patterns;
}

/**
 * @brief FeatureContainer::setSensorDurations
 * @param sensor_durations
 */
void FeatureContainer::setSensorDurations(vector<vector<float> > sensor_durations)
{
  this->sensor_durations = sensor_durations;
}

/**
 * @brief FeatureContainer::getDiscoveredPatterns
 * @return
 */
vector<int> FeatureContainer::getDiscoveredPatterns()
{
  return discovered_patterns;
}

/**
 * @brief FeatureContainer::getSequencePatterns
 * @return
 */
vector<int> FeatureContainer::getSequencePatterns()
{
  return sequence_patterns;
}

/**
 * @brief FeatureContainer::getSensorDurations
 * @return
 */
vector<vector<float> > FeatureContainer::getSensorDurations()
{
  return sensor_durations;
}

/**
 * @brief FeatureContainer::getActivityLabel
 * @return
 */
vector<string> FeatureContainer::getActivityLabel()
{
  return activity_labels;
}

/**
 * @brief FeatureContainer::setAverageSensorDurationsPerPattern
 * @param average_sensor_duration_per_pattern
 */
void FeatureContainer::setAverageSensorDurationsPerPattern(vector<vector<float> > average_sensor_duration_per_pattern)
{
  this->average_sensor_duration_per_pattern = average_sensor_duration_per_pattern;
}

/**
 * @brief FeatureContainer::getAverageSensorDurationsPerPattern
 * @return
 */
vector<vector<float> > FeatureContainer::getAverageSensorDurationsPerPattern()
{
  return average_sensor_duration_per_pattern;
}

/**
 * @brief FeatureContainer::insertActivityLabelsPerPattern
 * @param activity_labels_vector
 */
void FeatureContainer::setActivityLabelsPerPattern(vector<vector<int> > activity_labels_per_pattern)
{
  this->activity_labels_per_pattern = activity_labels_per_pattern;
}

/**
 * @brief FeatureContainer::getActivityLabelsPerPattern
 * @return
 */
vector<vector<int> > FeatureContainer::getActivityLabelsPerPattern()
{
  return activity_labels_per_pattern;
}

/**
 * @brief FeatureContainer::setMostCommonActivityLabelPerPattern
 * @param most_common_activity_label_per_pattern
 */
void FeatureContainer::setMostCommonActivityLabelPerPattern(vector<int> most_common_activity_label_per_pattern)
{
  this->most_common_activity_label_per_pattern = most_common_activity_label_per_pattern;
}

/**
 * @brief FeatureContainer::getMostCommonActivityLabelPerPattern
 * @return
 */
vector<int> FeatureContainer::getMostCommonActivityLabelPerPattern()
{
  return most_common_activity_label_per_pattern;
}

/**
 * @brief FeatureContainer::setTimeIndexToPatterns
 * @param time_index_to_patterns
 */
void FeatureContainer::setMostAssginedTimeIndexPerPatternInHourIndex(vector<int> time_index_per_pattern)
{
  this->most_assigned_time_index_per_pattern = time_index_per_pattern;
}

/**
 * @brief FeatureContainer::getTimeIndexToPatterns
 * @return
 */
vector<int> FeatureContainer::getMostAssignedTimeIndexPerPatternInHourIndex()
{
  return most_assigned_time_index_per_pattern;
}

/**
 * @brief FeatureContainer::setTimeIndexPerPattern
 * @param time_index_per_pattern
 */
void FeatureContainer::setTimeIndexPerPattern(vector<float> time_index_per_pattern)
{
  this->time_index_per_pattern = time_index_per_pattern;
}

/**
 * @brief FeatureContainer::getTimeIndexPerPattern
 * @return
 */
vector<float> FeatureContainer::getTimeIndexPerPattern()
{
  return time_index_per_pattern;
}

/**
 * @brief FeatureContainer::setDayNamePerPattern
 * @param day_name_per_pattern
 */
void FeatureContainer::setDayNamePerPattern(vector<string> day_name_per_pattern)
{
  this->day_name_per_pattern = day_name_per_pattern;
}

/**
 * @brief FeatureContainer::getDayNamePerPattern
 * @return
 */
vector<string> FeatureContainer::getDayNamePerPattern()
{
  return day_name_per_pattern;
}

/**
 * @brief FeatureContainer::setPatternsToMerge
 * @param patterns_to_merge
 */
void FeatureContainer::setPatternsToMerge(vector<vector<int> > patterns_to_merge)
{
  this->patterns_to_merge = patterns_to_merge;
}

/**
 * @brief FeatureContainer::getPatternsToMerge
 * @return
 */
vector<vector<int> > FeatureContainer::getPatternsToMerge()
{
  return patterns_to_merge;
}

/**
 * @brief FeatureContainer::setSimilarityScorePerPattern
 * @param similarity_score_per_pattern
 */
void FeatureContainer::setSimilarityScorePerPattern(vector<vector<float> > similarity_score_per_pattern)
{
  this->similarity_score_per_pattern = similarity_score_per_pattern;
}

/**
 * @brief FeatureContainer::getSimilarityScorePerPattern
 * @return
 */
vector<vector<float> > FeatureContainer::getSimilarityScorePerPattern()
{
  return similarity_score_per_pattern;
}

/**
 * @brief FeatureContainer::setSortedPatternsToMerge
 * @param sorted_patterns_to_merge
 */
void FeatureContainer::setSortedPatternsToMerge(vector<vector<int> > sorted_patterns_to_merge)
{
  this->sorted_patterns_to_merge = sorted_patterns_to_merge;
}

/**
 * @brief FeatureContainer::setSortedDiscoveredPatterns
 * @param sorted_discovered_patterns
 */
void FeatureContainer::setSortedDiscoveredPatterns(vector<int> sorted_discovered_patterns)
{
  this->sorted_discovered_patterns = sorted_discovered_patterns;
}

/**
 * @brief FeatureContainer::getSortedPatternsToMerge
 * @return
 */
vector<vector<int> > FeatureContainer::getSortedPatternsToMerge()
{
  return sorted_patterns_to_merge;
}

/**
 * @brief FeatureContainer::getSortedDiscoveredPatterns
 * @return
 */
vector<int> FeatureContainer::getSortedDiscoveredPatterns()
{
  return sorted_discovered_patterns;
}

/**
 * @brief FeatureContainer::setActiveSensors
 * @param active_sensors_per_pattern
 */
void FeatureContainer::setActiveSensorsPerPattern(vector<vector<int> > active_sensors_per_pattern)
{
  this->active_sensors_per_pattern = active_sensors_per_pattern;
}

/**
 * @brief FeatureContainer::getActiveSensors
 * @return
 */
vector<vector<int> > FeatureContainer::getActiveSensorsPerPattern()
{
  return active_sensors_per_pattern;
}

/**
 * @brief FeatureContainer::setPatternsLength
 * @param patterns_length
 */
void FeatureContainer::setPatternsLength(vector<int> patterns_length)
{
  this->patterns_length = patterns_length;
}

/**
 * @brief FeatureContainer::getPatternsLength
 * @return
 */
vector<int> FeatureContainer::getPatternsLength()
{
  return patterns_length;
}

/**
 * @brief FeatureContainer::setActualActivityLabels
 * @param actual_activity_labels
 * @return
 */
void FeatureContainer::setActualActivityLabels(vector<int> actual_activity_labels)
{
  this->actual_activity_labels = actual_activity_labels;
}

/**
 * @brief FeatureContainer::getActualActivityLabels
 * @return
 */
vector<int> FeatureContainer::getActualActivityLabels()
{
  return actual_activity_labels;
}

/**
 * @brief FeatureContainer::setPredictedActivityLabels
 * @param predicted_activity_labels
 */
void FeatureContainer::setPredictedActivityLabels(vector<int> predicted_activity_labels)
{
  this->predicted_activity_labels = predicted_activity_labels;
}

/**
 * @brief FeatureContainer::getPredictedActivityLabels
 * @return
 */
vector<int> FeatureContainer::getPredictedActivityLabels()
{
  return predicted_activity_labels;
}

/**
 * @brief FeatureContainer::setPredictedDiscoveredPatterns
 * @param predicted_discovered_patterns
 */
void FeatureContainer::setPredictedDiscoveredPatterns(vector<int> predicted_discovered_patterns)
{
  this->predicted_discovered_patterns = predicted_activity_labels;
}

/**
 * @brief FeatureContainer::getPredictedDiscoveredPatterns
 * @return
 */
vector<int> FeatureContainer::getPredictedDiscoveredPatterns()
{
  return predicted_discovered_patterns;
}

/**
 * @brief FeatureContainer::setAccuracyResultsMessage
 * @param accuracy_results_message
 */
void FeatureContainer::setAccuracyResultsMessage(string accuracy_results_message)
{
  this->accuracy_results_message = accuracy_results_message;
}

/**
 * @brief FeatureContainer::getAccuracyResultsMessage
 * @return
 */
string FeatureContainer::getAccuracyResultsMessage()
{
  return accuracy_results_message;
}
