#include<feature-reader.h>
/*
 * feature-reader.cpp
 *
 *  Created on: 2018-04-15
 *      Author: Mohamed Eldib
 * This class reads the files generated by hist_cluster class
 * 1- activity_per_window (generated by hist_cluster class)
 * 2- sequence_patterns (generated by hist_cluster class)
 * 3- discovered_patterns (generated by hist_cluster class)
 * 4- sensor_durations (generated by time-window-approach class)
 */
/**
 * @brief FeatureReader::FeatureReader
 * @param folder_path
 */
FeatureReader::FeatureReader(Home* home)
{
    COUT<<"FeatureReader"<<endl;
    logging::INFO("FeatureReader");

    this->home = home;
    this->home->readHomeSetup();
}
/**
 * @brief FeatureReader::~FeatureReader
 */\
FeatureReader::~FeatureReader()
{
    COUT<<"~FeatureReader"<<endl;
    logging::INFO("~FeatureReader");
}

/**
 * @brief FeatureReader::AssignTimeIndexToPatterns_
 * @param fc
 */
void FeatureReader::AssignTimeIndexPerPattern_(FeatureContainer* fc)
{
    COUT<<"AssignTimeIndexPerPattern_"<<endl;
    logging::INFO("AssignTimeIndexPerPattern_");

    vector<int> sequence_patterns = fc->getSequencePatterns();
    vector<float> time_index_to_patterns_minutes;

    //convert time constraints from seconds to hour (e.g. 3600/60)
    int time_constraint = ceil((home->getTimeConstraint()*1.0)/(home->getSensorTimeInterval()*1.0));
    //compute number of steps inside a single day segment
    int step=time_constraint;
    //incrementer for the count
    int step_increment=time_constraint;
    //assign time index to pattern
    int time_index_hours = 0;


    for(int i=0; i<sequence_patterns.size();i=i+step)
    {
        float time_index_minutes = time_index_hours;
        for(int j = i;  j <step_increment && j<sequence_patterns.size(); j++)
        {
            time_index_to_patterns_minutes.push_back(time_index_minutes);
            time_index_minutes+=0.01;
        }

        step_increment = step_increment+step;
        time_index_hours++;
    }

    fc->setTimeIndexPerPattern(time_index_to_patterns_minutes);
}

/**
 * @brief FeatureReader::readWithinDayClusterFeatures_
 * @param featureContainers
 */
void FeatureReader::readWithinDayClusterFeatures_(string folder_path,vector<FeatureContainer*>& featureContainers)
{
    COUT<<"readWithinDayClusterFeatures_"<<endl;
    logging::INFO("readWithinDayClusterFeatures_");

    //get folder names
    vector<string> folder_names=Common::getFolderNamesWithPaths(folder_path.c_str());

    for(int i = 0 ;i <folder_names.size();i++)
    {
        FeatureContainer* featureContainer = new FeatureContainer();

        COUT<<folder_names[i]<<endl;
        logging::INFO(folder_names[i]);

        readActivityFile_(folder_names[i],featureContainer);
        readDiscoveredPatternsFile_(folder_names[i],featureContainer);
        readSensorDurationsFile_(folder_names[i],featureContainer);
        readSequencePatternsFile_(folder_names[i],featureContainer);

        AssignTimeIndexPerPattern_(featureContainer);
        assignDayName_(folder_names[i],featureContainer);

        featureContainers.push_back(featureContainer);

    }

}

/**
 * @brief FeatureReader::readBetweenDayClusterFeatures_
 * @param featureContainers
 */
void FeatureReader::readBetweenDayClusterFeatures_(string folder_path, vector<FeatureContainer*>& featureContainers)
{
    COUT<<"readBetweenDayClusterFeatures_"<<endl;
    logging::INFO("readBetweenDayClusterFeatures_");

    FeatureContainer* featureContainer = new FeatureContainer();

    COUT<<folder_path<<endl;
    logging::INFO(folder_path);

    readActivityFile_(folder_path,featureContainer);
    readDiscoveredPatternsFile_(folder_path,featureContainer);
    readSensorDurationsFile_(folder_path,featureContainer);
    readSequencePatternsFile_(folder_path,featureContainer);
    readDayNames_(folder_path,featureContainer);
    readTimeIndex_(folder_path,featureContainer);


    featureContainers.push_back(featureContainer);


}

/**
 * @brief FeatureReader::readFeatures
 * @return
 */
vector<FeatureContainer*> FeatureReader::readFeatures(string folder_path,Constants::Cluster_Type type)
{
    COUT<<"readFeatures"<<endl;
    logging::INFO("readFeatures");

    vector<FeatureContainer*> featureContainers;

    if(type == Constants::within_day_cluster)
    {
        readWithinDayClusterFeatures_(folder_path,featureContainers);
    }
    else if (type = Constants::between_day_cluster)
    {
        readBetweenDayClusterFeatures_(folder_path,featureContainers);
    }

    return featureContainers;
}

/**
 * @brief FeatureReader::readDayNames_
 * @param file_path
 * @param fc
 */
void FeatureReader::readDayNames_(string file_path, FeatureContainer *fc)
{
    logging::INFO("readDayNames_");
    string file_name = file_path + "day_names.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');
    vector<string> day_names_per_pattern;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];
        day_names_per_pattern.push_back(lineContent[0]);
    }

    fc->setDayNamePerPattern(day_names_per_pattern);
}

/**
 * @brief FeatureReader::readTimeIndex_
 * @param file_path
 * @param fc
 */
void FeatureReader::readTimeIndex_(string file_path, FeatureContainer *fc)
{
    logging::INFO("readTimeIndex_");
    string file_name = file_path + "time_index.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');
    vector<float> time_index_per_pattern;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];
        time_index_per_pattern.push_back(atof(lineContent[0].c_str()));
    }

    fc->setTimeIndexPerPattern(time_index_per_pattern);
}

/**
 * @brief FeatureReader::readActivityFile_
 * @param file_path
 * @param fc
 */
void FeatureReader::readActivityFile_(string file_path,FeatureContainer* fc)
{
    COUT<<"readActivityFile_"<<endl;
    logging::INFO("readActivityFile_");

    string file_name = file_path + "activity_per_window.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');

    vector<string> activit_labels;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];

        //No annotated activity
        if(lineContent.size() == 0)
        {
            activit_labels.push_back("-");
        }
        else
        {
            activit_labels.push_back(lineContent[0]);
        }

    }

    fc->setActivityLabel(activit_labels);
}

/**
 * @brief FeatureReader::readSequencePatternsFile_
 * @param file_path
 * @param fc
 */
void FeatureReader::readSequencePatternsFile_(string file_path,FeatureContainer* fc)
{
    COUT<<"readSequencePatternsFile_"<<endl;
    logging::INFO("readSequencePatternsFile_");

    string file_name = file_path + "sequence_patterns.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');

    vector<int> sequence_patterns;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];
        sequence_patterns.push_back(atoi(lineContent[0].c_str()));
    }

    fc->setSequencePatterns(sequence_patterns);
}
/**
 * @brief FeatureReader::readDiscoveredPatternsFile_
 * @param file_path
 * @param fc
 */
void FeatureReader::readDiscoveredPatternsFile_(string file_path,FeatureContainer* fc)
{
    COUT<<"readDiscoveredPatternsFile_"<<endl;
    logging::INFO("readDiscoveredPatternsFile_");

    string file_name = file_path + "discovered_patterns.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');

    vector<int> discovered_sequence;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];
        discovered_sequence.push_back(atoi(lineContent[0].c_str()));
    }

    fc->setDiscoveredPatterns(discovered_sequence);
}
/**
 * @brief FeatureReader::readSensorDurationsFile_
 * @param file_path
 * @param fc
 */
void FeatureReader::readSensorDurationsFile_(string file_path,FeatureContainer* fc)
{
    COUT<<"readSensorDurationsFile_"<<endl;
    logging::INFO("readSensorDurationsFile_");

    string file_name = file_path + "sensors_duration.txt";

    vector<vector<string> > fileContents = Common::readFile(file_name,',');

    vector<vector<float> > sensor_durations_per_day;

    for(int i = 0 ;i <fileContents.size();i++)
    {
        vector<string> lineContent =fileContents[i];
        vector<float> sensor_durations_per_window;

        for(int j = 0; j<lineContent.size(); j++)
        {
            sensor_durations_per_window.push_back(atoi(lineContent[j].c_str()));
        }

        sensor_durations_per_day.push_back(sensor_durations_per_window);

    }

    fc->setSensorDurations(sensor_durations_per_day);
}

/**
 * @brief FeatureReader::assignDayName_
 * @param file_path
 * @param fc
 */
void FeatureReader::assignDayName_(string file_path, FeatureContainer *fc)
{
    COUT<<"assignDayName_"<<endl;
    logging::INFO("assignDayName_");

    vector<string> elem;
    Common::split(file_path,'/',elem);

    string day_name = elem[elem.size()-1];

    int num_of_sequence_patterns = fc->getSequencePatterns().size();
    vector<string> day_name_per_pattern(num_of_sequence_patterns,day_name);

    fc->setDayNamePerPattern(day_name_per_pattern);


}
